


//!Â¿Por quÃ© Node.js fue revolucionario?
// - Usa JavaScript en el backend, permitiendo que los desarrolladores frontend lo usen tambiÃ©n en servidores.
// - Modelo asÃ­ncrono y no bloqueante, lo que lo hace ideal para aplicaciones en tiempo real (chats, APIs, streaming, etc.).
// - npm facilita la reutilizaciÃ³n de paquetes, con mÃ¡s de 1 millÃ³n de mÃ³dulos disponibles.
// - Gran comunidad y soporte, lo que ha impulsado su adopciÃ³n en startups y grandes empresas.
// - a diferencia de PHP que se ejecuta cuando hay una peticiÃ³n, los servidores Node.js estÃ¡n siempre escuchando
// - PHP devuelve html y Node.js devuelve JSON
// - CompilaciÃ³n Just-In-Time (JIT)


// ðŸ”¹ Backend = Todo el conjunto de lÃ³gica de negocio (incluye bases de datos, autenticaciÃ³n, lÃ³gica de procesamiento, etc.).
// ðŸ”¹ Servidor = El programa que maneja las solicitudes y entrega respuestas (puede incluir una API, servir archivos, gestionar sesiones, etc.).
// ðŸ”¹ API = La forma estructurada en que otros sistemas pueden comunicarse con el servidor (a travÃ©s de endpoints REST, GraphQL, etc.).


//! ðŸ“Œ Â¿QuÃ© es I/O en informÃ¡tica?
// I/O significa Input/Output (Entrada/Salida) y se refiere a cualquier operaciÃ³n donde un sistema interactÃºa con el exterior. Puede ser:

// >> Entrada (Input): Datos que recibe un sistema (teclado, archivos, red, base de datos).
// >> Salida (Output): Datos que el sistema envÃ­a (pantalla, archivos, respuesta HTTP).

// Ejemplos de operaciones I/O:
// âœ… Leer un archivo del disco.
// âœ… Consultar una base de datos.
// âœ… Enviar una solicitud HTTP a una API.
// âœ… Recibir datos de un usuario a travÃ©s de un formulario.
