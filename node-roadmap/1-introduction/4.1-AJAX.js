


! AJAX

### ðŸŸ© **Node.js**  
- **Â¿QuÃ© es?**  
  Es un *entorno de ejecuciÃ³n* para JavaScript del lado del **servidor**.  
  Permite usar JavaScript para crear aplicaciones backend (como servidores web, APIs, scripts, etc.).

- **DÃ³nde se usa:** En el **servidor**  
- **Â¿Para quÃ© sirve?**  
  - Leer y escribir archivos (como los PDF y JSON que estÃ¡s manejando)
  - Conectarse a bases de datos
  - Crear servidores web (como con Express)
  - Ejecutar tareas de backend en general

- **Ejemplo:**  
  ```js
  const fs = require("fs");
  const data = fs.readFileSync("archivo.txt", "utf-8");
  console.log(data);
  ```

---

### ðŸŸ¦ **AJAX** (*Asynchronous JavaScript and XML*)  
- **Â¿QuÃ© es?**  
  Es una *tÃ©cnica* (no una tecnologÃ­a por sÃ­ sola) que permite que una pÃ¡gina web (en el navegador) haga peticiones al servidor **sin recargar la pÃ¡gina**.

- **DÃ³nde se usa:** En el **navegador / frontend**  
- **Â¿Para quÃ© sirve?**
  - Enviar o recibir datos del servidor en segundo plano (como pedir datos a una API)
  - Actualizar partes de la web sin recargarla
  - Mejorar la experiencia de usuario en apps web

- **Ejemplo con fetch:**  
  ```js
  fetch("/facturacion.json")
    .then(res => res.json())
    .then(data => console.log(data));
  ```

---

### ðŸ”„ En resumen:

| CaracterÃ­stica         | Node.js                       | AJAX                           |
|------------------------|-------------------------------|--------------------------------|
| Â¿QuÃ© es?               | Entorno de ejecuciÃ³n de JS    | TÃ©cnica para hacer peticiones |
| Â¿DÃ³nde se usa?         | En el **servidor**            | En el **navegador**            |
| Â¿QuiÃ©n lo ejecuta?     | El sistema (con Node instalado)| El navegador (Chrome, Firefox...) |
| Â¿QuÃ© hace?             | Ejecuta JS del lado servidor  | EnvÃ­a/recibe datos sin recargar la pÃ¡gina |
| Â¿Ejemplo de uso?       | Crear una API                 | Pedir datos a esa API          |

---

Â¿Quieres que te monte un ejemplo donde uses ambos a la vez? Tipo: Node.js crea un servidor y AJAX pide datos a ese servidor desde el navegador.
